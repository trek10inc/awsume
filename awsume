#!/bin/bash
#Author: Michael Barney, Trek10 Intern
#Date: May 22, 2017
#AWSume - a bash script to assume an AWS IAM role from the command-line

AWSUME_PROFILE_NAME=""
AWSUME_SOURCE_PROFILE=""
AWSUME_ROLE_ARN=""
AWSUME_MFA_ARN=""
AWSUME_IS_USER=false

#command-line options
AWSUME_DEFAULT=false
AWSUME_REFRESH=false
AWSUME_SHOW=false

#directory variables
AWSUME_CACHE=~/.aws/cli/cache/

#Session Variables
AWSUME_SessionText=""
AWSUME_SessionRegion=""

#Set the environment variables
AWSUME_Set-AwsEnvs()
{
    AWSUME_SessionRegion="$(aws configure get region --profile $AWSUME_PROFILE_NAME)"
    export AWS_SECRET_ACCESS_KEY="${AWSUME_SessionText[1]}"
    export AWS_SESSION_TOKEN="${AWSUME_SessionText[2]}"
    export AWS_SECURITY_TOKEN="${AWSUME_SessionText[2]}"
    export AWS_ACCESS_KEY_ID="${AWSUME_SessionText[0]}"
    export AWS_REGION="$AWSUME_SessionRegion"
    export AWS_DEFAULT_REGION="$AWSUME_SessionRegion"
}

#Remove the environment variables associated with the AWS CLI,
#ensuring all environment variables will be valid
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
unset AWS_SECURITY_TOKEN
unset AWS_ACCESS_KEY_ID
unset AWS_REGION
unset AWS_DEFAULT_REGION

#parse through parameters and handle them
for AWSUME_var in "$@"
do
    if [[ "$AWSUME_var" == "-"* ]]; then #this parameter is a flag
        if [[ "$AWSUME_var" == *"-d"* ]]; then AWSUME_DEFAULT=true
        elif [[ "$AWSUME_var" == *"-r"* ]]; then AWSUME_REFRESH=true
        elif [[ "$AWSUME_var" == *"-s"* ]]; then AWSUME_SHOW=true
        else 
            echo "USAGE: $0 <ProfileName> <options>"
            return 1
        fi
    fi
done

#get the profile name
if [ "$AWSUME_DEFAULT" = true ] || [ -z "$1" ]; then #go with default profile
    AWSUME_PROFILE_NAME="default"
else 
    AWSUME_PROFILE_NAME=$1
fi
AWSUME_PROFILE_NAME="$(echo -e "$AWSUME_PROFILE_NAME" | tr -d '[:space:]')" #trim whitespace

#get the source profile
AWSUME_SOURCE_PROFILE=$(aws configure get source_profile --profile "$AWSUME_PROFILE_NAME")
if [ -z "$AWSUME_SOURCE_PROFILE" ]; then
    AWSUME_IS_USER=true
    AWSUME_SOURCE_PROFILE="$AWSUME_PROFILE_NAME"
fi

#clear session attributes
AWSUME_SessionText=""

#if we have to grab a cached profile
if [ $AWSUME_REFRESH = false ]; then
    AWSUME_SessionText=""
    AWSUME_tempProfile=${AWSUME_CACHE}awsume-temp-$AWSUME_SOURCE_PROFILE.json
    if [ -e $AWSUME_tempProfile ]; then
        AWSUME_SessionText=(`cat $AWSUME_tempProfile`)
        AWSUME_Set-AwsEnvs
        #check if credentials are valid
        aws sts get-caller-identity --region us-east-1 > /dev/null 2> /dev/null 
        
        if [ "$?" -ne "0" ]; then
            rm $AWSUME_tempProfile
	        AWSUME_SessionText=""
        fi
    fi
fi

if [ -z "$AWSUME_SessionText" ]; then
    read -p "#Enter MFA code: " AWSUME_mfaToken

    #validate the mfa token
    if [[ ! $AWSUME_mfaToken =~ ^[0-9]{6}$ ]]; then
        echo "#Invalid MFA token"
        return 1
    fi

    #grab the session "object"
    AWSUME_USER_ARN=$(aws sts get-caller-identity \
        --region us-east-1 \
        --query Arn \
        --output text \
        --profile $AWSUME_SOURCE_PROFILE)
    
    AWSUME_MFA_ARN=${AWSUME_USER_ARN/user/mfa}
    AWSUME_SessionText=(`aws sts get-session-token \
        --region us-east-1 \
        --serial-number $AWSUME_MFA_ARN \
        --token-code $AWSUME_mfaToken \
        --profile $AWSUME_SOURCE_PROFILE \
        --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken,Credentials.Expiration]' \
        --output text`)

    #write session text to cache file
    [ -d $AWSUME_CACHE ] || mkdir $AWSUME_CACHE #if directory doesn't exist, make it
    AWSUME_tempProfile="awsume-temp-$AWSUME_SOURCE_PROFILE.json"
    echo ${AWSUME_SessionText[@]} > "${AWSUME_CACHE}${AWSUME_tempProfile}"

fi
AWSUME_Set-AwsEnvs
echo "#Source Profile Credentials ($AWSUME_SOURCE_PROFILE) expire: ${AWSUME_SessionText[3]}"

#now assume the role
if [ $AWSUME_IS_USER != true ]; then
    AWSUME_ROLE_ARN="$(aws configure get role_arn --profile "$AWSUME_PROFILE_NAME")"
    AWSUME_SessionText=(`aws sts assume-role \
        --role-arn $AWSUME_ROLE_ARN \
        --role-session-name "$AWSUME_PROFILE_NAME-$(date +%s)" \
        --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken,Credentials.Expiration]' \
        --output text`)
    AWSUME_Set-AwsEnvs
    echo "#Role Credentials ($AWSUME_PROFILE_NAME) expire: ${AWSUME_SessionText[3]}"
fi

if [ $AWSUME_SHOW = true ]; then
    echo export AWS_SECRET_ACCESS_KEY="${AWSUME_SessionText[1]}"
    echo export AWS_SESSION_TOKEN="${AWSUME_SessionText[2]}"
    echo export AWS_SECURITY_TOKEN="${AWSUME_SessionText[2]}"
    echo export AWS_ACCESS_KEY_ID="${AWSUME_SessionText[0]}"
    echo export AWS_REGION="$AWSUME_SessionRegion"
    echo export AWS_DEFAULT_REGION="$AWSUME_SessionRegion"
fi
